/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  Overrides,
  BigNumberish,
} from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { TestErc20, TestErc20Interface } from "../TestErc20";

const _abi = [
  {
    inputs: [
      {
        internalType: "string",
        name: "name_",
        type: "string",
      },
      {
        internalType: "string",
        name: "symbol_",
        type: "string",
      },
      {
        internalType: "uint256",
        name: "_supply",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "holder",
        type: "address",
      },
      {
        internalType: "uint8",
        name: "decimals_",
        type: "uint8",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Approval",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Transfer",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
    ],
    name: "allowance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "approve",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "decimals",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "subtractedValue",
        type: "uint256",
      },
    ],
    name: "decreaseAllowance",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "addedValue",
        type: "uint256",
      },
    ],
    name: "increaseAllowance",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "symbol",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transfer",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transferFrom",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x60806040523480156200001157600080fd5b5060405162000c9438038062000c948339810160408190526200003491620002cb565b8451620000499060039060208801906200016e565b5083516200005f9060049060208701906200016e565b506005805460ff191660ff83161790556200007b828462000086565b5050505050620003f7565b6001600160a01b038216620000e15760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f206164647265737300604482015260640160405180910390fd5b8060026000828254620000f591906200037d565b90915550506001600160a01b03821660009081526020819052604081208054839290620001249084906200037d565b90915550506040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35050565b8280546200017c90620003a4565b90600052602060002090601f016020900481019282620001a05760008555620001eb565b82601f10620001bb57805160ff1916838001178555620001eb565b82800160010185558215620001eb579182015b82811115620001eb578251825591602001919060010190620001ce565b50620001f9929150620001fd565b5090565b5b80821115620001f95760008155600101620001fe565b600082601f8301126200022657600080fd5b81516001600160401b0380821115620002435762000243620003e1565b604051601f8301601f19908116603f011681019082821181831017156200026e576200026e620003e1565b816040528381526020925086838588010111156200028b57600080fd5b600091505b83821015620002af578582018301518183018401529082019062000290565b83821115620002c15760008385830101525b9695505050505050565b600080600080600060a08688031215620002e457600080fd5b85516001600160401b0380821115620002fc57600080fd5b6200030a89838a0162000214565b965060208801519150808211156200032157600080fd5b50620003308882890162000214565b60408801516060890151919650945090506001600160a01b03811681146200035757600080fd5b608087015190925060ff811681146200036f57600080fd5b809150509295509295909350565b600082198211156200039f57634e487b7160e01b600052601160045260246000fd5b500190565b600181811c90821680620003b957607f821691505b60208210811415620003db57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052604160045260246000fd5b61088d80620004076000396000f3fe608060405234801561001057600080fd5b50600436106100a95760003560e01c80633950935111610071578063395093511461012957806370a082311461013c57806395d89b4114610165578063a457c2d71461016d578063a9059cbb14610180578063dd62ed3e1461019357600080fd5b806306fdde03146100ae578063095ea7b3146100cc57806318160ddd146100ef57806323b872dd14610101578063313ce56714610114575b600080fd5b6100b66101a6565b6040516100c391906107a1565b60405180910390f35b6100df6100da366004610777565b610238565b60405190151581526020016100c3565b6002545b6040519081526020016100c3565b6100df61010f36600461073b565b610250565b60055460405160ff90911681526020016100c3565b6100df610137366004610777565b610274565b6100f361014a3660046106e6565b6001600160a01b031660009081526020819052604090205490565b6100b6610296565b6100df61017b366004610777565b6102a5565b6100df61018e366004610777565b610325565b6100f36101a1366004610708565b610333565b6060600380546101b59061081c565b80601f01602080910402602001604051908101604052809291908181526020018280546101e19061081c565b801561022e5780601f106102035761010080835404028352916020019161022e565b820191906000526020600020905b81548152906001019060200180831161021157829003601f168201915b5050505050905090565b60003361024681858561035e565b5060019392505050565b60003361025e858285610482565b6102698585856104fc565b506001949350505050565b6000336102468185856102878383610333565b61029191906107f6565b61035e565b6060600480546101b59061081c565b600033816102b38286610333565b9050838110156103185760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b60648201526084015b60405180910390fd5b610269828686840361035e565b6000336102468185856104fc565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b6001600160a01b0383166103c05760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b606482015260840161030f565b6001600160a01b0382166104215760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b606482015260840161030f565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b600061048e8484610333565b905060001981146104f657818110156104e95760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e6365000000604482015260640161030f565b6104f6848484840361035e565b50505050565b6001600160a01b0383166105605760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b606482015260840161030f565b6001600160a01b0382166105c25760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b606482015260840161030f565b6001600160a01b0383166000908152602081905260409020548181101561063a5760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b606482015260840161030f565b6001600160a01b038085166000908152602081905260408082208585039055918516815290812080548492906106719084906107f6565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040516106bd91815260200190565b60405180910390a36104f6565b80356001600160a01b03811681146106e157600080fd5b919050565b6000602082840312156106f857600080fd5b610701826106ca565b9392505050565b6000806040838503121561071b57600080fd5b610724836106ca565b9150610732602084016106ca565b90509250929050565b60008060006060848603121561075057600080fd5b610759846106ca565b9250610767602085016106ca565b9150604084013590509250925092565b6000806040838503121561078a57600080fd5b610793836106ca565b946020939093013593505050565b600060208083528351808285015260005b818110156107ce578581018301518582016040015282016107b2565b818111156107e0576000604083870101525b50601f01601f1916929092016040019392505050565b6000821982111561081757634e487b7160e01b600052601160045260246000fd5b500190565b600181811c9082168061083057607f821691505b6020821081141561085157634e487b7160e01b600052602260045260246000fd5b5091905056fea2646970667358221220991b13ebcc2b2f550ccbfc911a9dedcaa73f2de2ccaa0aa20cae09bd48aacdf864736f6c63430008060033";

type TestErc20ConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TestErc20ConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class TestErc20__factory extends ContractFactory {
  constructor(...args: TestErc20ConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "TestErc20";
  }

  deploy(
    name_: string,
    symbol_: string,
    _supply: BigNumberish,
    holder: string,
    decimals_: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<TestErc20> {
    return super.deploy(
      name_,
      symbol_,
      _supply,
      holder,
      decimals_,
      overrides || {}
    ) as Promise<TestErc20>;
  }
  getDeployTransaction(
    name_: string,
    symbol_: string,
    _supply: BigNumberish,
    holder: string,
    decimals_: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      name_,
      symbol_,
      _supply,
      holder,
      decimals_,
      overrides || {}
    );
  }
  attach(address: string): TestErc20 {
    return super.attach(address) as TestErc20;
  }
  connect(signer: Signer): TestErc20__factory {
    return super.connect(signer) as TestErc20__factory;
  }
  static readonly contractName: "TestErc20";
  public readonly contractName: "TestErc20";
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TestErc20Interface {
    return new utils.Interface(_abi) as TestErc20Interface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TestErc20 {
    return new Contract(address, _abi, signerOrProvider) as TestErc20;
  }
}
