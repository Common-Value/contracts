{
  "address": "0x02f5f0F31ABf3806C74487265E07B1988228f6cF",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "blockTime",
          "type": "uint256"
        }
      ],
      "name": "ChallengePeriodActive",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidProof",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NoAssetsToWithdraw",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NoRewardAvailable",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotIfCampaignCancelled",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotIfCampaignLocked",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyAdmin",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "blockTime",
          "type": "uint256"
        }
      ],
      "name": "OnlyInChallengePeriod",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyOracle",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "blockTime",
          "type": "uint256"
        }
      ],
      "name": "ProposeWindowNotActive",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "WithdrawalNotAllowed",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "AdminTransfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "CampaignCancelled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "Challenge",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "share",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "reward",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "assset",
          "type": "address"
        }
      ],
      "name": "Claim",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "provider",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "asset",
          "type": "address"
        }
      ],
      "name": "Fund",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bool",
          "name": "locked",
          "type": "bool"
        }
      ],
      "name": "SharesLock",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "sharesMerkleRoot",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "sharesUri",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "activationTime",
          "type": "uint256"
        }
      ],
      "name": "SharesMerkleRootUpdate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "asset",
          "type": "address"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "ACTIVATION_PERIOD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ACTIVE_DURATION",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "CHALLENGE_PERIOD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "TOTAL_SHARES",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "activationTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "admin",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "approvedMerkleRoot",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        }
      ],
      "name": "balanceOfAsset",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "campaignCancelled",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cancelCampaign",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "challenge",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "checkMerkleRootUpdateAllowed",
      "outputs": [],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "share",
          "type": "uint256"
        },
        {
          "internalType": "bytes32[]",
          "name": "proof",
          "type": "bytes32[]"
        },
        {
          "internalType": "address[]",
          "name": "assets",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        }
      ],
      "name": "claim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "claimed",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "deployTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "fund",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getValidRoot",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "root",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_rewardRulesetUri",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "_admin",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_oracle",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_activationTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_CHALLENGE_PERIOD",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_ACTIVATION_PERIOD",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_ACTIVE_DURATION",
          "type": "uint256"
        }
      ],
      "name": "initCampaign",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isChallengePeriod",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isPendingActive",
      "outputs": [
        {
          "internalType": "bool",
          "name": "isActive",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isProposeWindowActive",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "oracle",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pendingMerkleRoot",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_sharesMerkleRoot",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "_sharesUri",
          "type": "bytes32"
        }
      ],
      "name": "proposeShares",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "providers",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardRulesetUri",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "share",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        }
      ],
      "name": "rewardsAvailableToClaimer",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "total",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_lock",
          "type": "bool"
        }
      ],
      "name": "setSharesLock",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sharesLocked",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "totalClaimed",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "totalProvided",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        }
      ],
      "name": "totalReceived",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "total",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "transferAdminRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "share",
          "type": "uint256"
        },
        {
          "internalType": "bytes32[]",
          "name": "proof",
          "type": "bytes32[]"
        }
      ],
      "name": "verifyShares",
      "outputs": [],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        }
      ],
      "name": "withdrawAssets",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x5a1e9d4e43a4b2dcde8c6d5398cefd21b2d45fa36c29d023abbf0c52737b6cb0",
  "receipt": {
    "to": null,
    "from": "0xFfEB3c7bE84527a44349aFD421dC5a1834DBAa1D",
    "contractAddress": "0x02f5f0F31ABf3806C74487265E07B1988228f6cF",
    "transactionIndex": 84,
    "gasUsed": "1544783",
    "logsBloom": "0x
    "blockHash": "0x04b9fa4df9f65a18ecd69db723abed9d5872abea31c67e9d07c34d26c6380dcb",
    "transactionHash": "0x5a1e9d4e43a4b2dcde8c6d5398cefd21b2d45fa36c29d023abbf0c52737b6cb0",
    "logs": [
      {
        "transactionIndex": 84,
        "blockNumber": 35404971,
        "transactionHash": "0x5a1e9d4e43a4b2dcde8c6d5398cefd21b2d45fa36c29d023abbf0c52737b6cb0",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000ffeb3c7be84527a44349afd421dc5a1834dbaa1d",
          "0x000000000000000000000000794e44d1334a56fea7f4df12633b88820d0c5888"
        ],
        "data": "0x000000000000000000000000000000000000000000000000019479f3a0555e53000000000000000000000000000000000000000000000000c411efa60d947c2600000000000000000000000000000000000000000000094b5945a7c40da6bf70000000000000000000000000000000000000000000000000c27d75b26d3f1dd300000000000000000000000000000000000000000000094b5ada21b7adfc1dc3",
        "logIndex": 274,
        "blockHash": "0x04b9fa4df9f65a18ecd69db723abed9d5872abea31c67e9d07c34d26c6380dcb"
      }
    ],
    "blockNumber": 35404971,
    "cumulativeGasUsed": "15222210",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "211fc06a958c8186003a16f50ccf43d6",
  "metadata": "{\"compiler\":{\"version\":\"0.8.6+commit.11564f7e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"blockTime\",\"type\":\"uint256\"}],\"name\":\"ChallengePeriodActive\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidProof\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoAssetsToWithdraw\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoRewardAvailable\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotIfCampaignCancelled\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotIfCampaignLocked\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyAdmin\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"blockTime\",\"type\":\"uint256\"}],\"name\":\"OnlyInChallengePeriod\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyOracle\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"blockTime\",\"type\":\"uint256\"}],\"name\":\"ProposeWindowNotActive\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WithdrawalNotAllowed\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"AdminTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"CampaignCancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Challenge\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"share\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"assset\",\"type\":\"address\"}],\"name\":\"Claim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"Fund\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"locked\",\"type\":\"bool\"}],\"name\":\"SharesLock\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"sharesMerkleRoot\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"sharesUri\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"activationTime\",\"type\":\"uint256\"}],\"name\":\"SharesMerkleRootUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ACTIVATION_PERIOD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ACTIVE_DURATION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CHALLENGE_PERIOD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TOTAL_SHARES\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"activationTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"approvedMerkleRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"balanceOfAsset\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"campaignCancelled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cancelCampaign\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"challenge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"checkMerkleRootUpdateAllowed\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"share\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"proof\",\"type\":\"bytes32[]\"},{\"internalType\":\"address[]\",\"name\":\"assets\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"claimed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deployTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"fund\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getValidRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"root\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_rewardRulesetUri\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_oracle\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_activationTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_CHALLENGE_PERIOD\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_ACTIVATION_PERIOD\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_ACTIVE_DURATION\",\"type\":\"uint256\"}],\"name\":\"initCampaign\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isChallengePeriod\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isPendingActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isProposeWindowActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oracle\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingMerkleRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_sharesMerkleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_sharesUri\",\"type\":\"bytes32\"}],\"name\":\"proposeShares\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"providers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardRulesetUri\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"share\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"rewardsAvailableToClaimer\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_lock\",\"type\":\"bool\"}],\"name\":\"setSharesLock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sharesLocked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"totalClaimed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"totalProvided\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"totalReceived\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"transferAdminRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"share\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"proof\",\"type\":\"bytes32[]\"}],\"name\":\"verifyShares\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"withdrawAssets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"title\":\"Campaign\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"TOTAL_SHARES()\":{\"notice\":\"Shares are considered a ratio [0-1] with 18 digits where 1E18 = 1 \"},\"balanceOfAsset(address)\":{\"notice\":\"Returns the currrent balance that the campaign holds for an asset. For the native token, asset is the zero address\"},\"campaignCancelled()\":{\"notice\":\"Once cancelled, the assets providers can withdraw \"},\"cancelCampaign()\":{\"notice\":\"Admin can cancel the campaign. After cancellation, asset providers can withdraw their assets and claims are disabled \"},\"challenge()\":{\"notice\":\"Admin can cancel the pending merkle root while in challenge period. Previously approved root will stay active \"},\"checkMerkleRootUpdateAllowed()\":{\"notice\":\"Returns true if the oracle can propose a new merkle root \"},\"claim(address,uint256,bytes32[],address[],address)\":{\"notice\":\"Claim rewards from one or more assets \"},\"claimed(address,address)\":{\"notice\":\"amount of assets already claimed per claimer address, per asset address (zero address represents the native token) \"},\"fund(address,uint256)\":{\"notice\":\"Fund campaign with native or any ERC20 token. For native token, asset is the zero address.  \"},\"getValidRoot()\":{\"notice\":\"Valid root is either the approved or pending one depending on the activation time \"},\"initCampaign(bytes32,address,address,uint256,uint256,uint256,uint256)\":{\"notice\":\"Campaign initialization, called once at deploy (using the campaign factory). CHALLENGE_PERIOD > ACTIVE_DURATION is recommended to limite one proposeal per active window\"},\"isChallengePeriod()\":{\"notice\":\"Indicates whether the campaign is currently at a challenge period \"},\"isPendingActive()\":{\"notice\":\"Returns true if the active root is the pending one \"},\"isProposeWindowActive()\":{\"notice\":\"Returns true if propose window for the oracle is active \"},\"pendingMerkleRoot()\":{\"notice\":\"Optimistic flow used to update merkleRoot. - Oracle propose update and Admin can block - Admin cannot initiate an update \"},\"proposeShares(bytes32,bytes32)\":{\"notice\":\"Only the oracle can propose a new merkleRoot. The proposed root becomes active only after a CHALLENGE_PERIOD \"},\"providers(address,address)\":{\"notice\":\"amount of rewards provided per address of provider, per asset address (zero address represents the native token) \"},\"rewardRulesetUri()\":{\"notice\":\"Uri pointing to the campaign's reward ruleset \"},\"rewardsAvailableToClaimer(address,uint256,address)\":{\"notice\":\"Calculates the amount of available rewards to claim for an account \"},\"setSharesLock(bool)\":{\"notice\":\"Admin can lock the campaign, meaning disable future merkle root updates \"},\"sharesLocked()\":{\"notice\":\"Once locked, the merkleRoot cannot be updated anymore until unlocked \"},\"totalClaimed(address)\":{\"notice\":\"amount of total assets already claimed per asset address (zero address represents the native token) \"},\"totalProvided(address)\":{\"notice\":\"amount of total rewards provided per asset address (zero address represents the native token) \"},\"totalReceived(address)\":{\"notice\":\"Total assets received by the contract. For the native token, asset is the zero address\"},\"verifyShares(address,uint256,bytes32[])\":{\"notice\":\"Validates the shares of an account \"},\"withdrawAssets(address,address)\":{\"notice\":\"asset providers can withdraw their proportion of assets only in case the campaign was cancelled by the admin \"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Campaign.sol\":\"Campaign\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!Address.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2a21b14ff90012878752f230d3ffd5c3405e5938d06c97a7d89c0a64561d0d66\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x0e9621f60b2faabe65549f7ed0f24e8853a45c1b7990d47e8160e523683f3935\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x032807210d1d7d218963d7355d62e021a84bf1b3339f4f50be2f63b53cccaf29\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/cryptography/MerkleProof.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev These functions deal with verification of Merkle Tree proofs.\\n *\\n * The proofs can be generated using the JavaScript library\\n * https://github.com/miguelmota/merkletreejs[merkletreejs].\\n * Note: the hashing algorithm should be keccak256 and pair sorting should be enabled.\\n *\\n * See `test/utils/cryptography/MerkleProof.test.js` for some examples.\\n *\\n * WARNING: You should avoid using leaf values that are 64 bytes long prior to\\n * hashing, or use a hash function other than keccak256 for hashing leaves.\\n * This is because the concatenation of a sorted pair of internal nodes in\\n * the merkle tree could be reinterpreted as a leaf value.\\n */\\nlibrary MerkleProof {\\n    /**\\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\\n     * defined by `root`. For this, a `proof` must be provided, containing\\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\\n     */\\n    function verify(\\n        bytes32[] memory proof,\\n        bytes32 root,\\n        bytes32 leaf\\n    ) internal pure returns (bool) {\\n        return processProof(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {verify}\\n     *\\n     * _Available since v4.7._\\n     */\\n    function verifyCalldata(\\n        bytes32[] calldata proof,\\n        bytes32 root,\\n        bytes32 leaf\\n    ) internal pure returns (bool) {\\n        return processProofCalldata(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\\n     * hash matches the root of the tree. When processing the proof, the pairs\\n     * of leafs & pre-images are assumed to be sorted.\\n     *\\n     * _Available since v4.4._\\n     */\\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            computedHash = _hashPair(computedHash, proof[i]);\\n        }\\n        return computedHash;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {processProof}\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processProofCalldata(bytes32[] calldata proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            computedHash = _hashPair(computedHash, proof[i]);\\n        }\\n        return computedHash;\\n    }\\n\\n    /**\\n     * @dev Returns true if the `leaves` can be proved to be a part of a Merkle tree defined by\\n     * `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\\n     *\\n     * _Available since v4.7._\\n     */\\n    function multiProofVerify(\\n        bytes32[] memory proof,\\n        bool[] memory proofFlags,\\n        bytes32 root,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bool) {\\n        return processMultiProof(proof, proofFlags, leaves) == root;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {multiProofVerify}\\n     *\\n     * _Available since v4.7._\\n     */\\n    function multiProofVerifyCalldata(\\n        bytes32[] calldata proof,\\n        bool[] calldata proofFlags,\\n        bytes32 root,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bool) {\\n        return processMultiProofCalldata(proof, proofFlags, leaves) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the root of a tree reconstructed from `leaves` and the sibling nodes in `proof`,\\n     * consuming from one or the other at each step according to the instructions given by\\n     * `proofFlags`.\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processMultiProof(\\n        bytes32[] memory proof,\\n        bool[] memory proofFlags,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bytes32 merkleRoot) {\\n        // This function rebuild the root hash by traversing the tree up from the leaves. The root is rebuilt by\\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\\n        // the merkle tree.\\n        uint256 leavesLen = leaves.length;\\n        uint256 totalHashes = proofFlags.length;\\n\\n        // Check proof validity.\\n        require(leavesLen + proof.length - 1 == totalHashes, \\\"MerkleProof: invalid multiproof\\\");\\n\\n        // The xxxPos values are \\\"pointers\\\" to the next value to consume in each array. All accesses are done using\\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \\\"pop\\\".\\n        bytes32[] memory hashes = new bytes32[](totalHashes);\\n        uint256 leafPos = 0;\\n        uint256 hashPos = 0;\\n        uint256 proofPos = 0;\\n        // At each step, we compute the next hash using two values:\\n        // - a value from the \\\"main queue\\\". If not all leaves have been consumed, we get the next leaf, otherwise we\\n        //   get the next hash.\\n        // - depending on the flag, either another value for the \\\"main queue\\\" (merging branches) or an element from the\\n        //   `proof` array.\\n        for (uint256 i = 0; i < totalHashes; i++) {\\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\\n            bytes32 b = proofFlags[i] ? leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++] : proof[proofPos++];\\n            hashes[i] = _hashPair(a, b);\\n        }\\n\\n        if (totalHashes > 0) {\\n            return hashes[totalHashes - 1];\\n        } else if (leavesLen > 0) {\\n            return leaves[0];\\n        } else {\\n            return proof[0];\\n        }\\n    }\\n\\n    /**\\n     * @dev Calldata version of {processMultiProof}\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processMultiProofCalldata(\\n        bytes32[] calldata proof,\\n        bool[] calldata proofFlags,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bytes32 merkleRoot) {\\n        // This function rebuild the root hash by traversing the tree up from the leaves. The root is rebuilt by\\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\\n        // the merkle tree.\\n        uint256 leavesLen = leaves.length;\\n        uint256 totalHashes = proofFlags.length;\\n\\n        // Check proof validity.\\n        require(leavesLen + proof.length - 1 == totalHashes, \\\"MerkleProof: invalid multiproof\\\");\\n\\n        // The xxxPos values are \\\"pointers\\\" to the next value to consume in each array. All accesses are done using\\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \\\"pop\\\".\\n        bytes32[] memory hashes = new bytes32[](totalHashes);\\n        uint256 leafPos = 0;\\n        uint256 hashPos = 0;\\n        uint256 proofPos = 0;\\n        // At each step, we compute the next hash using two values:\\n        // - a value from the \\\"main queue\\\". If not all leaves have been consumed, we get the next leaf, otherwise we\\n        //   get the next hash.\\n        // - depending on the flag, either another value for the \\\"main queue\\\" (merging branches) or an element from the\\n        //   `proof` array.\\n        for (uint256 i = 0; i < totalHashes; i++) {\\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\\n            bytes32 b = proofFlags[i] ? leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++] : proof[proofPos++];\\n            hashes[i] = _hashPair(a, b);\\n        }\\n\\n        if (totalHashes > 0) {\\n            return hashes[totalHashes - 1];\\n        } else if (leavesLen > 0) {\\n            return leaves[0];\\n        } else {\\n            return proof[0];\\n        }\\n    }\\n\\n    function _hashPair(bytes32 a, bytes32 b) private pure returns (bytes32) {\\n        return a < b ? _efficientHash(a, b) : _efficientHash(b, a);\\n    }\\n\\n    function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, a)\\n            mstore(0x20, b)\\n            value := keccak256(0x00, 0x40)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x596ed72a251d391b814a4aa19d7acb02ebdcc92ba27d3fff74a6f0c158b12ab7\",\"license\":\"MIT\"},\"contracts/Campaign.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\\\";\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\n\\n/**\\n * @title Campaign\\n */\\ncontract Campaign is Initializable, ReentrancyGuard {\\n    using SafeERC20 for IERC20;\\n\\n    /** Shares are considered a ratio [0-1] with 18 digits where 1E18 = 1 */\\n    uint256 public constant TOTAL_SHARES = 10**18;\\n\\n    uint256 public CHALLENGE_PERIOD;\\n    uint256 public ACTIVATION_PERIOD;\\n    uint256 public ACTIVE_DURATION;\\n\\n    bytes32 public approvedMerkleRoot;\\n\\n    /** Optimistic flow used to update merkleRoot.\\n     * - Oracle propose update and Admin can block\\n     * - Admin cannot initiate an update */\\n    bytes32 public pendingMerkleRoot;\\n    uint256 public activationTime;\\n    uint256 public deployTime;\\n\\n    /** Uri pointing to the campaign's reward ruleset */\\n    bytes32 public rewardRulesetUri;\\n\\n    address public admin;\\n    address public oracle;\\n\\n    /** amount of total assets already claimed per asset address (zero address represents the native token) */\\n    mapping(address => uint256) public totalClaimed;\\n    /** amount of assets already claimed per claimer address, per asset address (zero address represents the native token) */\\n    mapping(address => mapping(address => uint256)) public claimed;\\n\\n    /** Once locked, the merkleRoot cannot be updated anymore until unlocked */\\n    bool public sharesLocked;\\n    /** Once cancelled, the assets providers can withdraw */\\n    bool public campaignCancelled;\\n\\n    /** amount of rewards provided per address of provider, per asset address (zero address represents the native token) */\\n    mapping(address => mapping(address => uint256)) public providers;\\n    /** amount of total rewards provided per asset address (zero address represents the native token) */\\n    mapping(address => uint256) public totalProvided;\\n\\n    event Fund(address indexed provider, uint256 amount, address asset);\\n    event SharesMerkleRootUpdate(bytes32 sharesMerkleRoot, bytes32 sharesUri, uint256 activationTime);\\n    event Claim(address indexed account, uint256 share, uint256 reward, address assset);\\n    event Challenge();\\n    event Withdraw(address indexed account, uint256 amount, address asset);\\n    event SharesLock(bool locked);\\n    event CampaignCancelled();\\n    event AdminTransfer();\\n\\n    error InvalidProof();\\n    error ProposeWindowNotActive(uint256 blockTime);\\n    error ChallengePeriodActive(uint256 blockTime);\\n    error OnlyInChallengePeriod(uint256 blockTime);\\n    error NoRewardAvailable();\\n    error OnlyAdmin();\\n    error WithdrawalNotAllowed();\\n    error NoAssetsToWithdraw();\\n    error OnlyOracle();\\n    error NotIfCampaignLocked();\\n    error NotIfCampaignCancelled();\\n\\n    modifier onlyAdmin() {\\n        if (msg.sender != admin) {\\n            revert OnlyAdmin();\\n        }\\n        _;\\n    }\\n\\n    modifier onlyOracle() {\\n        if (msg.sender != oracle) {\\n            revert OnlyOracle();\\n        }\\n        _;\\n    }\\n\\n    modifier notLocked() {\\n        if (sharesLocked) {\\n            revert NotIfCampaignLocked();\\n        }\\n        _;\\n    }\\n\\n    modifier notCancelled() {\\n        if (campaignCancelled) {\\n            revert NotIfCampaignCancelled();\\n        }\\n        _;\\n    }\\n\\n    /***************\\n    EXTERNAL FUNCTIONS\\n    ***************/\\n\\n    /**\\n     * Campaign initialization, called once at deploy (using the campaign factory).\\n     * CHALLENGE_PERIOD > ACTIVE_DURATION is recommended to limite one proposeal per\\n     * active window\\n     */\\n    function initCampaign(\\n        bytes32 _rewardRulesetUri,\\n        address _admin,\\n        address _oracle,\\n        uint256 _activationTime,\\n        uint256 _CHALLENGE_PERIOD,\\n        uint256 _ACTIVATION_PERIOD,\\n        uint256 _ACTIVE_DURATION\\n    ) external initializer {\\n        rewardRulesetUri = _rewardRulesetUri;\\n        admin = _admin;\\n        oracle = _oracle;\\n        activationTime = _activationTime > 0 ? _activationTime : block.timestamp;\\n        deployTime = block.timestamp;\\n\\n        CHALLENGE_PERIOD = _CHALLENGE_PERIOD;\\n        ACTIVATION_PERIOD = _ACTIVATION_PERIOD;\\n        ACTIVE_DURATION = _ACTIVE_DURATION;\\n    }\\n\\n    /** Fund campaign with native or any ERC20 token.\\n     * For native token, asset is the zero address.  */\\n    function fund(address asset, uint256 amount) external payable nonReentrant notCancelled {\\n        if (asset == address(0)) {\\n            _fund(msg.value, asset, msg.sender);\\n        } else {\\n            _fund(amount, asset, msg.sender);\\n        }\\n    }\\n\\n    /** Only the oracle can propose a new merkleRoot. The proposed root becomes active only\\n     * after a CHALLENGE_PERIOD */\\n    function proposeShares(bytes32 _sharesMerkleRoot, bytes32 _sharesUri) external onlyOracle notLocked notCancelled {\\n        checkMerkleRootUpdateAllowed();\\n\\n        approvedMerkleRoot = pendingMerkleRoot;\\n        pendingMerkleRoot = _sharesMerkleRoot;\\n        activationTime = block.timestamp + CHALLENGE_PERIOD;\\n\\n        emit SharesMerkleRootUpdate(_sharesMerkleRoot, _sharesUri, activationTime);\\n    }\\n\\n    /** Claim rewards from one or more assets */\\n    function claim(\\n        address account,\\n        uint256 share,\\n        bytes32[] calldata proof,\\n        address[] calldata assets,\\n        address target\\n    ) external nonReentrant notCancelled {\\n        verifyShares(account, share, proof);\\n\\n        for (uint8 ix = 0; ix < assets.length; ix++) {\\n            _claim(account, share, assets[ix], msg.sender, target);\\n        }\\n    }\\n\\n    /** Admin can cancel the pending merkle root while in challenge period.\\n     * Previously approved root will stay active */\\n    function challenge() external onlyAdmin {\\n        if (!isChallengePeriod()) {\\n            revert OnlyInChallengePeriod(block.timestamp);\\n        }\\n\\n        pendingMerkleRoot = bytes32(0);\\n        emit Challenge();\\n    }\\n\\n    /** Admin can lock the campaign, meaning disable future merkle root updates */\\n    function setSharesLock(bool _lock) external onlyAdmin {\\n        sharesLocked = _lock;\\n        emit SharesLock(_lock);\\n    }\\n\\n    /** Admin can cancel the campaign.\\n     * After cancellation, asset providers can withdraw their assets and claims are disabled */\\n    function cancelCampaign() external onlyAdmin {\\n        campaignCancelled = true;\\n        emit CampaignCancelled();\\n    }\\n\\n    /** asset providers can withdraw their proportion of assets only in case the campaign was cancelled by the admin */\\n    function withdrawAssets(address account, address asset) external nonReentrant {\\n        if (campaignCancelled) {\\n            uint256 amount = (balanceOfAsset(asset) * providers[asset][account]) / totalProvided[asset];\\n            if (amount == 0) {\\n                revert NoAssetsToWithdraw();\\n            }\\n            providers[asset][account] = 0;\\n\\n            transferAssetOut(account, amount, asset);\\n\\n            emit Withdraw(account, amount, asset);\\n        } else {\\n            revert WithdrawalNotAllowed();\\n        }\\n    }\\n\\n    function transferAdminRole(address newAdmin) external onlyAdmin {\\n        admin = newAdmin;\\n        emit AdminTransfer();\\n    }\\n\\n    receive() external payable notCancelled {\\n        _fund(msg.value, address(0), msg.sender);\\n    }\\n\\n    /***************\\n    VIEW FUNCTIONS\\n    ***************/\\n\\n    /** Returns the currrent balance that the campaign holds for an asset.\\n     * For the native token, asset is the zero address*/\\n    function balanceOfAsset(address asset) public view returns (uint256) {\\n        return asset == address(0) ? address(this).balance : IERC20(asset).balanceOf(address(this));\\n    }\\n\\n    /** Validates the shares of an account */\\n    function verifyShares(\\n        address account,\\n        uint256 share,\\n        bytes32[] calldata proof\\n    ) public view {\\n        bytes32 claimingMerkleRoot = getValidRoot();\\n\\n        bytes32 leaf = keccak256(abi.encodePacked(account, share));\\n        if (MerkleProof.verify(proof, claimingMerkleRoot, leaf) == false) {\\n            revert InvalidProof();\\n        }\\n    }\\n\\n    /** Calculates the amount of available rewards to claim for an account */\\n    function rewardsAvailableToClaimer(\\n        address account,\\n        uint256 share,\\n        address asset\\n    ) public view returns (uint256 total) {\\n        /** Rewards by claimer are a portion of the total assets received. If new assets are received, new rewards will become available */\\n        return (totalReceived(asset) * share) / TOTAL_SHARES - claimed[asset][account];\\n    }\\n\\n    /** Returns true if the active root is the pending one */\\n    function isPendingActive() public view returns (bool isActive) {\\n        return pendingMerkleRoot != bytes32(0) && block.timestamp > activationTime;\\n    }\\n\\n    /** Valid root is either the approved or pending one depending on the activation time */\\n    function getValidRoot() public view returns (bytes32 root) {\\n        return isPendingActive() ? pendingMerkleRoot : approvedMerkleRoot;\\n    }\\n\\n    /** Total assets received by the contract.\\n     * For the native token, asset is the zero address*/\\n    function totalReceived(address asset) public view returns (uint256 total) {\\n        return balanceOfAsset(asset) + totalClaimed[asset];\\n    }\\n\\n    /** Indicates whether the campaign is currently at a challenge period */\\n    function isChallengePeriod() public view returns (bool) {\\n        return block.timestamp < activationTime;\\n    }\\n\\n    /** Returns true if propose window for the oracle is active */\\n    function isProposeWindowActive() public view returns (bool) {\\n        return (uint256(block.timestamp) - uint256(deployTime)) % ACTIVATION_PERIOD < ACTIVE_DURATION;\\n    }\\n\\n    /** Returns true if the oracle can propose a new merkle root */\\n    function checkMerkleRootUpdateAllowed() public view {\\n        if (isChallengePeriod()) {\\n            revert ChallengePeriodActive(block.timestamp);\\n        }\\n\\n        if (!isProposeWindowActive()) {\\n            revert ProposeWindowNotActive(block.timestamp);\\n        }\\n    }\\n\\n    /** variable getters */\\n\\n    /***************\\n    INTERNAL FUNCTIONS\\n    ***************/\\n\\n    /** Claiming is always enabled (effectively possible only when a non-zero approved merkleRoot is set) */\\n    function _claim(\\n        address account,\\n        uint256 share,\\n        address asset,\\n        address sender,\\n        address target\\n    ) internal {\\n        uint256 reward = rewardsAvailableToClaimer(account, share, asset);\\n\\n        claimed[asset][account] += reward;\\n        totalClaimed[asset] += reward;\\n\\n        if (sender == account && target != address(0)) {\\n            transferAssetOut(target, reward, asset);\\n        } else {\\n            transferAssetOut(account, reward, asset);\\n        }\\n\\n        emit Claim(account, share, reward, asset);\\n    }\\n\\n    function _fund(\\n        uint256 amount,\\n        address asset,\\n        address from\\n    ) internal {\\n        providers[asset][from] += amount;\\n        totalProvided[asset] += amount;\\n        if (asset != address(0)) {\\n            IERC20(asset).safeTransferFrom(from, address(this), amount);\\n        }\\n        emit Fund(from, amount, address(asset));\\n    }\\n\\n    function transferAssetOut(\\n        address to,\\n        uint256 amount,\\n        address asset\\n    ) internal {\\n        if (asset == address(0)) {\\n            (bool success, ) = to.call{ value: amount }(\\\"\\\");\\n            require(success, \\\"ether transfer failed\\\");\\n        } else {\\n            IERC20(asset).safeTransfer(to, amount);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xabc3d46470869e0778a1e2e0ad6406a0d56cfd7aa27d8ec7211f9f3c0212e051\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5060018055611a95806100246000396000f3fe6080604052600436106102075760003560e01c80637cc0cdf211610118578063ada8f919116100a0578063c3a079ed1161006f578063c3a079ed146105ec578063d2ef739814610602578063da4493f614610617578063ef5d9ae81461062d578063f851a4401461065a57600080fd5b8063ada8f9191461056c578063be8b76861461058c578063c1d89941146105ac578063c24e4778146105cc57600080fd5b80639637f475116100e75780639637f475146104f5578063977aa88b1461050b578063980e784414610521578063a98acb4614610536578063a9ec3a1b1461055657600080fd5b80637cc0cdf2146104675780637dc0d1d01461048157806385e3f997146104b95780638abb5d22146104d557600080fd5b80634df9cfb31161019b57806375e07c2d1161016a57806375e07c2d146103ff5780637a40624b146104145780637b1837de1461042a5780637c99ca6d1461043d5780637cbb7d5e1461045257600080fd5b80634df9cfb314610389578063531e050d146103a957806363a5b88d146103c95780636c4fbc4a146103e857600080fd5b806327ce11cb116101d757806327ce11cb146102e95780633e1619401461031657806340bcf7481461032c578063449497281461036457600080fd5b80627c4d51146102485780630c9cbf0e14610271578063162dfe00146102a957806317b9d05e146102c957600080fd5b3661024357600e54610100900460ff16156102355760405163a99e45dd60e01b815260040160405180910390fd5b6102413460003361067a565b005b600080fd5b34801561025457600080fd5b5061025e60045481565b6040519081526020015b60405180910390f35b34801561027d57600080fd5b5061025e61028c366004611645565b600d60209081526000928352604080842090915290825290205481565b3480156102b557600080fd5b506102416102c43660046116de565b610751565b3480156102d557600080fd5b506102416102e436600461186e565b610804565b3480156102f557600080fd5b5061025e61030436600461162a565b60106020526000908152604090205481565b34801561032257600080fd5b5061025e60035481565b34801561033857600080fd5b5061025e610347366004611645565b600f60209081526000928352604080842090915290825290205481565b34801561037057600080fd5b506103796108e4565b6040519015158152602001610268565b34801561039557600080fd5b5061025e6103a436600461162a565b61090a565b3480156103b557600080fd5b506102416103c43660046117d3565b61093c565b3480156103d557600080fd5b50600e5461037990610100900460ff1681565b3480156103f457600080fd5b506007544210610379565b34801561040b57600080fd5b5061025e6109ae565b34801561042057600080fd5b5061025e60085481565b610241610438366004611678565b6109cc565b34801561044957600080fd5b50610379610a57565b34801561045e57600080fd5b50610241610a6f565b34801561047357600080fd5b50600e546103799060ff1681565b34801561048d57600080fd5b50600b546104a1906001600160a01b031681565b6040516001600160a01b039091168152602001610268565b3480156104c557600080fd5b5061025e670de0b6b3a764000081565b3480156104e157600080fd5b506102416104f0366004611738565b610abd565b34801561050157600080fd5b5061025e60065481565b34801561051757600080fd5b5061025e60095481565b34801561052d57600080fd5b50610241610b7e565b34801561054257600080fd5b5061024161055136600461180d565b610be3565b34801561056257600080fd5b5061025e60055481565b34801561057857600080fd5b5061024161058736600461162a565b610d4b565b34801561059857600080fd5b5061025e6105a73660046116a2565b610dbd565b3480156105b857600080fd5b5061025e6105c736600461162a565b610e20565b3480156105d857600080fd5b506102416105e7366004611645565b610eb4565b3480156105f857600080fd5b5061025e60025481565b34801561060e57600080fd5b50610241610ff3565b34801561062357600080fd5b5061025e60075481565b34801561063957600080fd5b5061025e61064836600461162a565b600c6020526000908152604090205481565b34801561066657600080fd5b50600a546104a1906001600160a01b031681565b6001600160a01b038083166000908152600f60209081526040808320938516835292905290812080548592906106b190849061192f565b90915550506001600160a01b038216600090815260106020526040812080548592906106de90849061192f565b90915550506001600160a01b03821615610707576107076001600160a01b038316823086611072565b604080518481526001600160a01b0384811660208301528316917fa5e8482b3a4fbac393476288e591dd9316d7304a537b26f9b67167f0ce19750f910160405180910390a2505050565b600061075b6109ae565b6040516bffffffffffffffffffffffff19606088901b166020820152603481018690529091506000906054016040516020818303038152906040528051906020012090506107df8484808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152508692508591506110e39050565b6107fc576040516309bde33960e01b815260040160405180910390fd5b505050505050565b600b546001600160a01b0316331461082f576040516380fee10560e01b815260040160405180910390fd5b600e5460ff161561085357604051634c167e3b60e01b815260040160405180910390fd5b600e54610100900460ff161561087c5760405163a99e45dd60e01b815260040160405180910390fd5b610884610a6f565b6006805460055582905560025461089b904261192f565b6007819055604080518481526020810184905280820192909252517f93d244ac7b8f4282b061b1dcb3f543f36f06af40a7bfdefe04fc913ef7ea54f99181900360600190a15050565b6000600454600354600854426108fa919061197a565b61090491906119f8565b10905090565b6001600160a01b0381166000908152600c602052604081205461092c83610e20565b610936919061192f565b92915050565b600a546001600160a01b0316331461096757604051634755657960e01b815260040160405180910390fd5b600e805460ff19168215159081179091556040519081527f161c6403efb8e4c55a592ebbe46f13ba803dd00cb970b735606b6518eb5475ff9060200160405180910390a150565b60006109b8610a57565b6109c3575060055490565b6006545b905090565b600260015414156109f85760405162461bcd60e51b81526004016109ef906118f8565b60405180910390fd5b6002600155600e54610100900460ff1615610a265760405163a99e45dd60e01b815260040160405180910390fd5b6001600160a01b038216610a4457610a3f34833361067a565b610a4f565b610a4f81833361067a565b505060018055565b600654600090158015906109c7575050600754421190565b600754421015610a945760405163ddc07f7160e01b81524260048201526024016109ef565b610a9c6108e4565b610abb576040516303ab46c160e11b81524260048201526024016109ef565b565b60026001541415610ae05760405162461bcd60e51b81526004016109ef906118f8565b6002600155600e54610100900460ff1615610b0e5760405163a99e45dd60e01b815260040160405180910390fd5b610b1a87878787610751565b60005b60ff8116831115610b7057610b5e888886868560ff16818110610b4257610b42611a38565b9050602002016020810190610b57919061162a565b33866110f9565b80610b68816119d8565b915050610b1d565b505060018055505050505050565b600a546001600160a01b03163314610ba957604051634755657960e01b815260040160405180910390fd5b600e805461ff0019166101001790556040517f123d4f203b2b83bfe9f45903402bb88193cc56a43371d97ab5a51bd1817d858690600090a1565b600054610100900460ff1615808015610c035750600054600160ff909116105b80610c1d5750303b158015610c1d575060005460ff166001145b610c805760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016109ef565b6000805460ff191660011790558015610ca3576000805461ff0019166101001790555b6009889055600a80546001600160a01b03808a166001600160a01b031992831617909255600b80549289169290911691909117905584610ce35742610ce5565b845b600755426008556002849055600383905560048290558015610d41576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5050505050505050565b600a546001600160a01b03163314610d7657604051634755657960e01b815260040160405180910390fd5b600a80546001600160a01b0319166001600160a01b0383161790556040517f86111e0a132b5277d510cdd314ee7e9dec0b468abfdfb76bc4eea73db5089d5990600090a150565b6001600160a01b038082166000908152600d60209081526040808320938716835292905290812054670de0b6b3a764000084610df88561090a565b610e02919061195b565b610e0c9190611947565b610e16919061197a565b90505b9392505050565b60006001600160a01b03821615610ead576040516370a0823160e01b81523060048201526001600160a01b038316906370a082319060240160206040518083038186803b158015610e7057600080fd5b505afa158015610e84573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ea89190611890565b610936565b4792915050565b60026001541415610ed75760405162461bcd60e51b81526004016109ef906118f8565b6002600155600e54610100900460ff1615610fda576001600160a01b03808216600090815260106020908152604080832054600f8352818420948716845293909152812054909190610f2884610e20565b610f32919061195b565b610f3c9190611947565b905080610f5c57604051635da3252f60e11b815260040160405180910390fd5b6001600160a01b038083166000908152600f60209081526040808320938716835292905290812055610f8f83828461120c565b604080518281526001600160a01b0384811660208301528516917f56c54ba9bd38d8fd62012e42c7ee564519b09763c426d331b3661b537ead19b2910160405180910390a250610a4f565b60405163209a769d60e11b815260040160405180910390fd5b600a546001600160a01b0316331461101e57604051634755657960e01b815260040160405180910390fd5b600754421061104257604051633e71b1bf60e11b81524260048201526024016109ef565b600060068190556040517fa0f4a9a971d0d41496054a6616f175690f8b322091fcd26dc9e81fc96d4124849190a1565b6040516001600160a01b03808516602483015283166044820152606481018290526110dd9085906323b872dd60e01b906084015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b0319909316929092179091526112ce565b50505050565b6000826110f085846113a0565b14949350505050565b6000611106868686610dbd565b6001600160a01b038086166000908152600d60209081526040808320938b1683529290529081208054929350839290919061114290849061192f565b90915550506001600160a01b0384166000908152600c60205260408120805483929061116f90849061192f565b90915550506001600160a01b0383811690871614801561119757506001600160a01b03821615155b156111ac576111a782828661120c565b6111b7565b6111b786828661120c565b60408051868152602081018390526001600160a01b03868116828401529151918816917fb6fe5ce185a3773d47e919f57c7edfd102c91cb7833b2be405c4de89d9980fd79181900360600190a2505050505050565b6001600160a01b0381166112b5576000836001600160a01b03168360405160006040518083038185875af1925050503d8060008114611267576040519150601f19603f3d011682016040523d82523d6000602084013e61126c565b606091505b50509050806110dd5760405162461bcd60e51b8152602060048201526015602482015274195d1a195c881d1c985b9cd9995c8819985a5b1959605a1b60448201526064016109ef565b6112c96001600160a01b03821684846113ed565b505050565b6000611323826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b031661141d9092919063ffffffff16565b8051909150156112c9578080602001905181019061134191906117f0565b6112c95760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016109ef565b600081815b84518110156113e5576113d1828683815181106113c4576113c4611a38565b602002602001015161142c565b9150806113dd816119bd565b9150506113a5565b509392505050565b6040516001600160a01b0383166024820152604481018290526112c990849063a9059cbb60e01b906064016110a6565b6060610e168484600085611458565b6000818310611448576000828152602084905260409020610e19565b5060009182526020526040902090565b6060824710156114b95760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b60648201526084016109ef565b6001600160a01b0385163b6115105760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016109ef565b600080866001600160a01b0316858760405161152c91906118a9565b60006040518083038185875af1925050503d8060008114611569576040519150601f19603f3d011682016040523d82523d6000602084013e61156e565b606091505b509150915061157e828286611589565b979650505050505050565b60608315611598575081610e19565b8251156115a85782518084602001fd5b8160405162461bcd60e51b81526004016109ef91906118c5565b80356001600160a01b03811681146115d957600080fd5b919050565b60008083601f8401126115f057600080fd5b50813567ffffffffffffffff81111561160857600080fd5b6020830191508360208260051b850101111561162357600080fd5b9250929050565b60006020828403121561163c57600080fd5b610e19826115c2565b6000806040838503121561165857600080fd5b611661836115c2565b915061166f602084016115c2565b90509250929050565b6000806040838503121561168b57600080fd5b611694836115c2565b946020939093013593505050565b6000806000606084860312156116b757600080fd5b6116c0846115c2565b9250602084013591506116d5604085016115c2565b90509250925092565b600080600080606085870312156116f457600080fd5b6116fd856115c2565b935060208501359250604085013567ffffffffffffffff81111561172057600080fd5b61172c878288016115de565b95989497509550505050565b600080600080600080600060a0888a03121561175357600080fd5b61175c886115c2565b965060208801359550604088013567ffffffffffffffff8082111561178057600080fd5b61178c8b838c016115de565b909750955060608a01359150808211156117a557600080fd5b506117b28a828b016115de565b90945092506117c59050608089016115c2565b905092959891949750929550565b6000602082840312156117e557600080fd5b8135610e1981611a4e565b60006020828403121561180257600080fd5b8151610e1981611a4e565b600080600080600080600060e0888a03121561182857600080fd5b87359650611838602089016115c2565b9550611846604089016115c2565b969995985095966060810135965060808101359560a0820135955060c0909101359350915050565b6000806040838503121561188157600080fd5b50508035926020909101359150565b6000602082840312156118a257600080fd5b5051919050565b600082516118bb818460208701611991565b9190910192915050565b60208152600082518060208401526118e4816040850160208701611991565b601f01601f19169190910160400192915050565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b6000821982111561194257611942611a0c565b500190565b60008261195657611956611a22565b500490565b600081600019048311821515161561197557611975611a0c565b500290565b60008282101561198c5761198c611a0c565b500390565b60005b838110156119ac578181015183820152602001611994565b838111156110dd5750506000910152565b60006000198214156119d1576119d1611a0c565b5060010190565b600060ff821660ff8114156119ef576119ef611a0c565b60010192915050565b600082611a0757611a07611a22565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052603260045260246000fd5b8015158114611a5c57600080fd5b5056fea2646970667358221220d690fbf778714ddbddc6710dddef0723fe5e48067426b053cf2eb49044b1761864736f6c63430008060033",
  "deployedBytecode": "0x6080604052600436106102075760003560e01c80637cc0cdf211610118578063ada8f919116100a0578063c3a079ed1161006f578063c3a079ed146105ec578063d2ef739814610602578063da4493f614610617578063ef5d9ae81461062d578063f851a4401461065a57600080fd5b8063ada8f9191461056c578063be8b76861461058c578063c1d89941146105ac578063c24e4778146105cc57600080fd5b80639637f475116100e75780639637f475146104f5578063977aa88b1461050b578063980e784414610521578063a98acb4614610536578063a9ec3a1b1461055657600080fd5b80637cc0cdf2146104675780637dc0d1d01461048157806385e3f997146104b95780638abb5d22146104d557600080fd5b80634df9cfb31161019b57806375e07c2d1161016a57806375e07c2d146103ff5780637a40624b146104145780637b1837de1461042a5780637c99ca6d1461043d5780637cbb7d5e1461045257600080fd5b80634df9cfb314610389578063531e050d146103a957806363a5b88d146103c95780636c4fbc4a146103e857600080fd5b806327ce11cb116101d757806327ce11cb146102e95780633e1619401461031657806340bcf7481461032c578063449497281461036457600080fd5b80627c4d51146102485780630c9cbf0e14610271578063162dfe00146102a957806317b9d05e146102c957600080fd5b3661024357600e54610100900460ff16156102355760405163a99e45dd60e01b815260040160405180910390fd5b6102413460003361067a565b005b600080fd5b34801561025457600080fd5b5061025e60045481565b6040519081526020015b60405180910390f35b34801561027d57600080fd5b5061025e61028c366004611645565b600d60209081526000928352604080842090915290825290205481565b3480156102b557600080fd5b506102416102c43660046116de565b610751565b3480156102d557600080fd5b506102416102e436600461186e565b610804565b3480156102f557600080fd5b5061025e61030436600461162a565b60106020526000908152604090205481565b34801561032257600080fd5b5061025e60035481565b34801561033857600080fd5b5061025e610347366004611645565b600f60209081526000928352604080842090915290825290205481565b34801561037057600080fd5b506103796108e4565b6040519015158152602001610268565b34801561039557600080fd5b5061025e6103a436600461162a565b61090a565b3480156103b557600080fd5b506102416103c43660046117d3565b61093c565b3480156103d557600080fd5b50600e5461037990610100900460ff1681565b3480156103f457600080fd5b506007544210610379565b34801561040b57600080fd5b5061025e6109ae565b34801561042057600080fd5b5061025e60085481565b610241610438366004611678565b6109cc565b34801561044957600080fd5b50610379610a57565b34801561045e57600080fd5b50610241610a6f565b34801561047357600080fd5b50600e546103799060ff1681565b34801561048d57600080fd5b50600b546104a1906001600160a01b031681565b6040516001600160a01b039091168152602001610268565b3480156104c557600080fd5b5061025e670de0b6b3a764000081565b3480156104e157600080fd5b506102416104f0366004611738565b610abd565b34801561050157600080fd5b5061025e60065481565b34801561051757600080fd5b5061025e60095481565b34801561052d57600080fd5b50610241610b7e565b34801561054257600080fd5b5061024161055136600461180d565b610be3565b34801561056257600080fd5b5061025e60055481565b34801561057857600080fd5b5061024161058736600461162a565b610d4b565b34801561059857600080fd5b5061025e6105a73660046116a2565b610dbd565b3480156105b857600080fd5b5061025e6105c736600461162a565b610e20565b3480156105d857600080fd5b506102416105e7366004611645565b610eb4565b3480156105f857600080fd5b5061025e60025481565b34801561060e57600080fd5b50610241610ff3565b34801561062357600080fd5b5061025e60075481565b34801561063957600080fd5b5061025e61064836600461162a565b600c6020526000908152604090205481565b34801561066657600080fd5b50600a546104a1906001600160a01b031681565b6001600160a01b038083166000908152600f60209081526040808320938516835292905290812080548592906106b190849061192f565b90915550506001600160a01b038216600090815260106020526040812080548592906106de90849061192f565b90915550506001600160a01b03821615610707576107076001600160a01b038316823086611072565b604080518481526001600160a01b0384811660208301528316917fa5e8482b3a4fbac393476288e591dd9316d7304a537b26f9b67167f0ce19750f910160405180910390a2505050565b600061075b6109ae565b6040516bffffffffffffffffffffffff19606088901b166020820152603481018690529091506000906054016040516020818303038152906040528051906020012090506107df8484808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152508692508591506110e39050565b6107fc576040516309bde33960e01b815260040160405180910390fd5b505050505050565b600b546001600160a01b0316331461082f576040516380fee10560e01b815260040160405180910390fd5b600e5460ff161561085357604051634c167e3b60e01b815260040160405180910390fd5b600e54610100900460ff161561087c5760405163a99e45dd60e01b815260040160405180910390fd5b610884610a6f565b6006805460055582905560025461089b904261192f565b6007819055604080518481526020810184905280820192909252517f93d244ac7b8f4282b061b1dcb3f543f36f06af40a7bfdefe04fc913ef7ea54f99181900360600190a15050565b6000600454600354600854426108fa919061197a565b61090491906119f8565b10905090565b6001600160a01b0381166000908152600c602052604081205461092c83610e20565b610936919061192f565b92915050565b600a546001600160a01b0316331461096757604051634755657960e01b815260040160405180910390fd5b600e805460ff19168215159081179091556040519081527f161c6403efb8e4c55a592ebbe46f13ba803dd00cb970b735606b6518eb5475ff9060200160405180910390a150565b60006109b8610a57565b6109c3575060055490565b6006545b905090565b600260015414156109f85760405162461bcd60e51b81526004016109ef906118f8565b60405180910390fd5b6002600155600e54610100900460ff1615610a265760405163a99e45dd60e01b815260040160405180910390fd5b6001600160a01b038216610a4457610a3f34833361067a565b610a4f565b610a4f81833361067a565b505060018055565b600654600090158015906109c7575050600754421190565b600754421015610a945760405163ddc07f7160e01b81524260048201526024016109ef565b610a9c6108e4565b610abb576040516303ab46c160e11b81524260048201526024016109ef565b565b60026001541415610ae05760405162461bcd60e51b81526004016109ef906118f8565b6002600155600e54610100900460ff1615610b0e5760405163a99e45dd60e01b815260040160405180910390fd5b610b1a87878787610751565b60005b60ff8116831115610b7057610b5e888886868560ff16818110610b4257610b42611a38565b9050602002016020810190610b57919061162a565b33866110f9565b80610b68816119d8565b915050610b1d565b505060018055505050505050565b600a546001600160a01b03163314610ba957604051634755657960e01b815260040160405180910390fd5b600e805461ff0019166101001790556040517f123d4f203b2b83bfe9f45903402bb88193cc56a43371d97ab5a51bd1817d858690600090a1565b600054610100900460ff1615808015610c035750600054600160ff909116105b80610c1d5750303b158015610c1d575060005460ff166001145b610c805760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016109ef565b6000805460ff191660011790558015610ca3576000805461ff0019166101001790555b6009889055600a80546001600160a01b03808a166001600160a01b031992831617909255600b80549289169290911691909117905584610ce35742610ce5565b845b600755426008556002849055600383905560048290558015610d41576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5050505050505050565b600a546001600160a01b03163314610d7657604051634755657960e01b815260040160405180910390fd5b600a80546001600160a01b0319166001600160a01b0383161790556040517f86111e0a132b5277d510cdd314ee7e9dec0b468abfdfb76bc4eea73db5089d5990600090a150565b6001600160a01b038082166000908152600d60209081526040808320938716835292905290812054670de0b6b3a764000084610df88561090a565b610e02919061195b565b610e0c9190611947565b610e16919061197a565b90505b9392505050565b60006001600160a01b03821615610ead576040516370a0823160e01b81523060048201526001600160a01b038316906370a082319060240160206040518083038186803b158015610e7057600080fd5b505afa158015610e84573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ea89190611890565b610936565b4792915050565b60026001541415610ed75760405162461bcd60e51b81526004016109ef906118f8565b6002600155600e54610100900460ff1615610fda576001600160a01b03808216600090815260106020908152604080832054600f8352818420948716845293909152812054909190610f2884610e20565b610f32919061195b565b610f3c9190611947565b905080610f5c57604051635da3252f60e11b815260040160405180910390fd5b6001600160a01b038083166000908152600f60209081526040808320938716835292905290812055610f8f83828461120c565b604080518281526001600160a01b0384811660208301528516917f56c54ba9bd38d8fd62012e42c7ee564519b09763c426d331b3661b537ead19b2910160405180910390a250610a4f565b60405163209a769d60e11b815260040160405180910390fd5b600a546001600160a01b0316331461101e57604051634755657960e01b815260040160405180910390fd5b600754421061104257604051633e71b1bf60e11b81524260048201526024016109ef565b600060068190556040517fa0f4a9a971d0d41496054a6616f175690f8b322091fcd26dc9e81fc96d4124849190a1565b6040516001600160a01b03808516602483015283166044820152606481018290526110dd9085906323b872dd60e01b906084015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b0319909316929092179091526112ce565b50505050565b6000826110f085846113a0565b14949350505050565b6000611106868686610dbd565b6001600160a01b038086166000908152600d60209081526040808320938b1683529290529081208054929350839290919061114290849061192f565b90915550506001600160a01b0384166000908152600c60205260408120805483929061116f90849061192f565b90915550506001600160a01b0383811690871614801561119757506001600160a01b03821615155b156111ac576111a782828661120c565b6111b7565b6111b786828661120c565b60408051868152602081018390526001600160a01b03868116828401529151918816917fb6fe5ce185a3773d47e919f57c7edfd102c91cb7833b2be405c4de89d9980fd79181900360600190a2505050505050565b6001600160a01b0381166112b5576000836001600160a01b03168360405160006040518083038185875af1925050503d8060008114611267576040519150601f19603f3d011682016040523d82523d6000602084013e61126c565b606091505b50509050806110dd5760405162461bcd60e51b8152602060048201526015602482015274195d1a195c881d1c985b9cd9995c8819985a5b1959605a1b60448201526064016109ef565b6112c96001600160a01b03821684846113ed565b505050565b6000611323826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b031661141d9092919063ffffffff16565b8051909150156112c9578080602001905181019061134191906117f0565b6112c95760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016109ef565b600081815b84518110156113e5576113d1828683815181106113c4576113c4611a38565b602002602001015161142c565b9150806113dd816119bd565b9150506113a5565b509392505050565b6040516001600160a01b0383166024820152604481018290526112c990849063a9059cbb60e01b906064016110a6565b6060610e168484600085611458565b6000818310611448576000828152602084905260409020610e19565b5060009182526020526040902090565b6060824710156114b95760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b60648201526084016109ef565b6001600160a01b0385163b6115105760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016109ef565b600080866001600160a01b0316858760405161152c91906118a9565b60006040518083038185875af1925050503d8060008114611569576040519150601f19603f3d011682016040523d82523d6000602084013e61156e565b606091505b509150915061157e828286611589565b979650505050505050565b60608315611598575081610e19565b8251156115a85782518084602001fd5b8160405162461bcd60e51b81526004016109ef91906118c5565b80356001600160a01b03811681146115d957600080fd5b919050565b60008083601f8401126115f057600080fd5b50813567ffffffffffffffff81111561160857600080fd5b6020830191508360208260051b850101111561162357600080fd5b9250929050565b60006020828403121561163c57600080fd5b610e19826115c2565b6000806040838503121561165857600080fd5b611661836115c2565b915061166f602084016115c2565b90509250929050565b6000806040838503121561168b57600080fd5b611694836115c2565b946020939093013593505050565b6000806000606084860312156116b757600080fd5b6116c0846115c2565b9250602084013591506116d5604085016115c2565b90509250925092565b600080600080606085870312156116f457600080fd5b6116fd856115c2565b935060208501359250604085013567ffffffffffffffff81111561172057600080fd5b61172c878288016115de565b95989497509550505050565b600080600080600080600060a0888a03121561175357600080fd5b61175c886115c2565b965060208801359550604088013567ffffffffffffffff8082111561178057600080fd5b61178c8b838c016115de565b909750955060608a01359150808211156117a557600080fd5b506117b28a828b016115de565b90945092506117c59050608089016115c2565b905092959891949750929550565b6000602082840312156117e557600080fd5b8135610e1981611a4e565b60006020828403121561180257600080fd5b8151610e1981611a4e565b600080600080600080600060e0888a03121561182857600080fd5b87359650611838602089016115c2565b9550611846604089016115c2565b969995985095966060810135965060808101359560a0820135955060c0909101359350915050565b6000806040838503121561188157600080fd5b50508035926020909101359150565b6000602082840312156118a257600080fd5b5051919050565b600082516118bb818460208701611991565b9190910192915050565b60208152600082518060208401526118e4816040850160208701611991565b601f01601f19169190910160400192915050565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b6000821982111561194257611942611a0c565b500190565b60008261195657611956611a22565b500490565b600081600019048311821515161561197557611975611a0c565b500290565b60008282101561198c5761198c611a0c565b500390565b60005b838110156119ac578181015183820152602001611994565b838111156110dd5750506000910152565b60006000198214156119d1576119d1611a0c565b5060010190565b600060ff821660ff8114156119ef576119ef611a0c565b60010192915050565b600082611a0757611a07611a22565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052603260045260246000fd5b8015158114611a5c57600080fd5b5056fea2646970667358221220d690fbf778714ddbddc6710dddef0723fe5e48067426b053cf2eb49044b1761864736f6c63430008060033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "title": "Campaign",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "TOTAL_SHARES()": {
        "notice": "Shares are considered a ratio [0-1] with 18 digits where 1E18 = 1 "
      },
      "balanceOfAsset(address)": {
        "notice": "Returns the currrent balance that the campaign holds for an asset. For the native token, asset is the zero address"
      },
      "campaignCancelled()": {
        "notice": "Once cancelled, the assets providers can withdraw "
      },
      "cancelCampaign()": {
        "notice": "Admin can cancel the campaign. After cancellation, asset providers can withdraw their assets and claims are disabled "
      },
      "challenge()": {
        "notice": "Admin can cancel the pending merkle root while in challenge period. Previously approved root will stay active "
      },
      "checkMerkleRootUpdateAllowed()": {
        "notice": "Returns true if the oracle can propose a new merkle root "
      },
      "claim(address,uint256,bytes32[],address[],address)": {
        "notice": "Claim rewards from one or more assets "
      },
      "claimed(address,address)": {
        "notice": "amount of assets already claimed per claimer address, per asset address (zero address represents the native token) "
      },
      "fund(address,uint256)": {
        "notice": "Fund campaign with native or any ERC20 token. For native token, asset is the zero address.  "
      },
      "getValidRoot()": {
        "notice": "Valid root is either the approved or pending one depending on the activation time "
      },
      "initCampaign(bytes32,address,address,uint256,uint256,uint256,uint256)": {
        "notice": "Campaign initialization, called once at deploy (using the campaign factory). CHALLENGE_PERIOD > ACTIVE_DURATION is recommended to limite one proposeal per active window"
      },
      "isChallengePeriod()": {
        "notice": "Indicates whether the campaign is currently at a challenge period "
      },
      "isPendingActive()": {
        "notice": "Returns true if the active root is the pending one "
      },
      "isProposeWindowActive()": {
        "notice": "Returns true if propose window for the oracle is active "
      },
      "pendingMerkleRoot()": {
        "notice": "Optimistic flow used to update merkleRoot. - Oracle propose update and Admin can block - Admin cannot initiate an update "
      },
      "proposeShares(bytes32,bytes32)": {
        "notice": "Only the oracle can propose a new merkleRoot. The proposed root becomes active only after a CHALLENGE_PERIOD "
      },
      "providers(address,address)": {
        "notice": "amount of rewards provided per address of provider, per asset address (zero address represents the native token) "
      },
      "rewardRulesetUri()": {
        "notice": "Uri pointing to the campaign's reward ruleset "
      },
      "rewardsAvailableToClaimer(address,uint256,address)": {
        "notice": "Calculates the amount of available rewards to claim for an account "
      },
      "setSharesLock(bool)": {
        "notice": "Admin can lock the campaign, meaning disable future merkle root updates "
      },
      "sharesLocked()": {
        "notice": "Once locked, the merkleRoot cannot be updated anymore until unlocked "
      },
      "totalClaimed(address)": {
        "notice": "amount of total assets already claimed per asset address (zero address represents the native token) "
      },
      "totalProvided(address)": {
        "notice": "amount of total rewards provided per asset address (zero address represents the native token) "
      },
      "totalReceived(address)": {
        "notice": "Total assets received by the contract. For the native token, asset is the zero address"
      },
      "verifyShares(address,uint256,bytes32[])": {
        "notice": "Validates the shares of an account "
      },
      "withdrawAssets(address,address)": {
        "notice": "asset providers can withdraw their proportion of assets only in case the campaign was cancelled by the admin "
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 86,
        "contract": "contracts/Campaign.sol:Campaign",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 89,
        "contract": "contracts/Campaign.sol:Campaign",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 241,
        "contract": "contracts/Campaign.sol:Campaign",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 1533,
        "contract": "contracts/Campaign.sol:Campaign",
        "label": "CHALLENGE_PERIOD",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 1535,
        "contract": "contracts/Campaign.sol:Campaign",
        "label": "ACTIVATION_PERIOD",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 1537,
        "contract": "contracts/Campaign.sol:Campaign",
        "label": "ACTIVE_DURATION",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 1539,
        "contract": "contracts/Campaign.sol:Campaign",
        "label": "approvedMerkleRoot",
        "offset": 0,
        "slot": "5",
        "type": "t_bytes32"
      },
      {
        "astId": 1542,
        "contract": "contracts/Campaign.sol:Campaign",
        "label": "pendingMerkleRoot",
        "offset": 0,
        "slot": "6",
        "type": "t_bytes32"
      },
      {
        "astId": 1544,
        "contract": "contracts/Campaign.sol:Campaign",
        "label": "activationTime",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 1546,
        "contract": "contracts/Campaign.sol:Campaign",
        "label": "deployTime",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 1549,
        "contract": "contracts/Campaign.sol:Campaign",
        "label": "rewardRulesetUri",
        "offset": 0,
        "slot": "9",
        "type": "t_bytes32"
      },
      {
        "astId": 1551,
        "contract": "contracts/Campaign.sol:Campaign",
        "label": "admin",
        "offset": 0,
        "slot": "10",
        "type": "t_address"
      },
      {
        "astId": 1553,
        "contract": "contracts/Campaign.sol:Campaign",
        "label": "oracle",
        "offset": 0,
        "slot": "11",
        "type": "t_address"
      },
      {
        "astId": 1558,
        "contract": "contracts/Campaign.sol:Campaign",
        "label": "totalClaimed",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 1565,
        "contract": "contracts/Campaign.sol:Campaign",
        "label": "claimed",
        "offset": 0,
        "slot": "13",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 1568,
        "contract": "contracts/Campaign.sol:Campaign",
        "label": "sharesLocked",
        "offset": 0,
        "slot": "14",
        "type": "t_bool"
      },
      {
        "astId": 1571,
        "contract": "contracts/Campaign.sol:Campaign",
        "label": "campaignCancelled",
        "offset": 1,
        "slot": "14",
        "type": "t_bool"
      },
      {
        "astId": 1578,
        "contract": "contracts/Campaign.sol:Campaign",
        "label": "providers",
        "offset": 0,
        "slot": "15",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 1583,
        "contract": "contracts/Campaign.sol:Campaign",
        "label": "totalProvided",
        "offset": 0,
        "slot": "16",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}